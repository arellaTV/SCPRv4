#!/usr/bin/env node

// This is for running Embeditor in Node.js.
//
// Provide markup with embed placeholders through STDIN
// and rendered HTML will be returned through STDOUT.

process.stdin.setEncoding('utf8')

if(!require('../lib/embeditor/embeditor-test.js')()){ // Don't run the main code if we are in test mode.

  require('../lib/embeditor/embeditor-env.js')(function(Embeditor, $, _, window){

    process.stdin.on('data', function(html){
      var body = $('body').html(html);
      embeditor = new Embeditor.Base({
        Embedly: {
          query: {
            key: '0cb3651dde4740db8fcb147850c6b555'
          }
        }
      });
      var oncomplete = function(){
        // Write our rendered HTML to STDOUT
        // process.stderr.write(JSON.stringify({data: body.html()}))
        process.stdin.pause()
        process.stdout.write(body.html() + "\x04")
        process.stderr.write("\x04")
        process.stdin.resume()
      }
      // The below is meant to take the place of the swap method
      // on Embeditor.Base by forcing a sequential execution,
      // so we can perform a callback on complete.
      var placeholders = embeditor.placeholders;
      var len = placeholders.length;
      var i=0
      while(i<len){
        var p1 = placeholders[i]
        var p2 = placeholders[i+1]
        if(p2 !== void 0){ // If there is another placeholder after this one
          (function(p1, p2){
            p1.onembed = function(){
              p2.swap()  // Call its swap function once we are done inserting this embed
            }
          })(p1, p2)
        } else {
          p1.onembed = function(){
            oncomplete() // Tell the last placeholder to call the final callback to write to stdout.
          }
        }
        i++
      }
      // start on the first placeholder
      var firstPlaceholder = placeholders[0];
      if(firstPlaceholder){
        embeditor.placeholders[0].swap()
      } else {
        oncomplete() // Write to stdout anyway if we have no placeholders.
      }
    })

  })

}