#!/usr/bin/env node

// This is for running Embeditor in Node.js.
//
// Provide markup with embed placeholders through STDIN
// and rendered HTML will be returned through STDOUT.

process.stdin.setEncoding('utf8')

var processHTML = function(html, oncomplete){
  var body = $('body');
  body.empty(); // remove any child nodes that may still exist
  $('body').html(html);
  embeditor = new Embeditor.Base({
    Embedly: {
      query: {
        key: '0cb3651dde4740db8fcb147850c6b555'
      }
    }
  });
  // The below is meant to take the place of the swap method
  // on Embeditor.Base by forcing a sequential execution,
  // so we can perform a callback on complete.
  var placeholders = embeditor.placeholders;
  var len = placeholders.length;
  var i=0
  while(i<len){
    var p1 = placeholders[i]
    var p2 = placeholders[i+1]
    if(p2 !== void 0){ // If there is another placeholder after this one
      (function(p1, p2){
        p1.onembed = function(){
          p2.swap()  // Call its swap function once we are done inserting this embed
        }
      })(p1, p2)
    } else {
      p1.onembed = function(){
        oncomplete(body) // Tell the last placeholder to call the final callback to write to stdout.
      }
    }
    i++
  }
  // start on the first placeholder
  var firstPlaceholder = placeholders[0];
  if(firstPlaceholder){
    embeditor.placeholders[0].swap()
  } else {
    oncomplete(body) // Write to stdout anyway if we have no placeholders.
  }
}

var lock = false;

var checker = function(data){
  if(!lock){
    lock = true; // prevent incoming STDIN events from triggering DOM changes 
    // while we are working on this particular chunk of data
    //
    // it's a problem because asynchronous parts of the embeditor code will
    // yield to those events
    processHTML(data, function(body){
      // Write our rendered HTML to STDOUT
      process.stdin.pause()
      process.stdout.write(body.html() + "\x04") // \x04 is our chunk delimiter
      process.stderr.write("\x04")
      process.stdin.resume()
      lock = false;
    })
  } else {
    //if locked, we will try again the next chance we get
    setTimeout((function(){checker(data)})(data), 0)
  }
}

if(!require('../lib/embeditor/embeditor-test.js')()){ // Don't run the main code if we are in test mode.
  require('../lib/embeditor/embeditor-env.js')(function(Embeditor, $, _, window){
    process.stdin.on('data', checker)
  })
}